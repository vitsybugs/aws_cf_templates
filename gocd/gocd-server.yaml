---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'GoCD: highly available GoCD server, a cloudonaut.io template'
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the GoCD server.'
    Type: String
    Default: ''
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-531a4c3c'
    'eu-west-3':
      AMI: 'ami-8ee056f3'
    'eu-west-2':
      AMI: 'ami-403e2524'
    'eu-west-1':
      AMI: 'ami-d834aba1'
    'ap-northeast-2':
      AMI: 'ami-863090e8'
    'ap-northeast-1':
      AMI: 'ami-ceafcba8'
    'sa-east-1':
      AMI: 'ami-84175ae8'
    'ca-central-1':
      AMI: 'ami-a954d1cd'
    'ap-southeast-1':
      AMI: 'ami-68097514'
    'ap-southeast-2':
      AMI: 'ami-942dd1f6'
    'eu-central-1':
      AMI: 'ami-5652ce39'
    'us-east-1':
      AMI: 'ami-97785bed'
    'us-east-2':
      AMI: 'ami-f63b1193'
    'us-west-1':
      AMI: 'ami-824c4ee2'
    'us-west-2':
      AMI: 'ami-f2d3638a'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources:
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-efs'
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref ServerSecurityGroup
        FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  EFSFileSystem: # TODO add monitoring
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
  EFSMountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
      - !Ref EFSSecurityGroup
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'
  EFSMountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
      - !Ref EFSSecurityGroup
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-lb'
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      - CidrIp: '0.0.0.0/0'
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  LoadBalancer: # TODO add monitoring
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: 2
        Interval: 15
        Target: 'HTTP:8153/go/'
        Timeout: 10
        UnhealthyThreshold: 2
      Listeners:
      - InstancePort: 8153
        InstanceProtocol: HTTP
        LoadBalancerPort: 80
        Protocol: HTTP
      - InstancePort: 8154
        InstanceProtocol: TCP
        LoadBalancerPort: 443
        Protocol: TCP
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets:
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'
  ServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-server'
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        FromPort: 8153
        ToPort: 8154
        IpProtocol: tcp
      - CidrIp: '0.0.0.0/0' # TODO shutdown SSH to bastion host
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  ServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref ServerRole
  ServerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource: 'arn:aws:logs:*:*:*'
  ServerLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          # TODO default: !If [HasIAMUserSSHAccess, [awslogs, ssh-access, mount, install, setup, custom, run], [awslogs, mount, install, setup, custom, run]]
          default: [adduser, mount, addrepo, install, cfnhup]
        adduser:
          commands:
            'a_groupadd':
              command: 'groupadd -g 497 go'
              test: 'if grep -q go: /etc/group; then exit 1; else exit 0; fi'
            'b_useradd':
              command: 'adduser -u 498 -g 497 -s /bin/bash -d /var/go -c ''GoCD'' go'
              test: 'if grep -q go: /etc/passwd; then exit 1; else exit 0; fi'
        mount:
          packages:
            yum:
              'nfs-utils': []
          commands:
            'a_mkdir':
              command: 'mkdir /mnt/go && chown -R go:go /mnt/go'
              test: '[ ! -d /mnt/go ]'
            'b_mount':
              command: !Sub 'while ! nc -z ${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com 2049; do sleep 10; done && sleep 10 && mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 "${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/" /mnt/go'
              test: 'if mount | grep -q /mnt/go; then exit 1; else exit 0; fi'
            'c_mkdir_etc_go':
              command: 'mkdir /etc/go && chown go:go /etc/go && chmod 0770 /etc/go'
              test: '[ ! -d /etc/go ]'
            'd_mkdir_var_lib_go_server':
              command: 'mkdir /var/lib/go-server && chown go:go /var/lib/go-server && chmod 0770 /var/lib/go-server'
              test: '[ ! -d /var/lib/go-server ]'
            'e_mkdir_mnt_go_etc_go':
              command: 'mkdir /mnt/go/etc && mkdir /mnt/go/etc/go && chown go:go /mnt/go/etc/go && chmod 0770 /mnt/go/etc/go'
              test: '[ ! -d /mnt/go/etc/go ]'
            'f_mkdir_mnt_go_var_lib_go_server':
              command: 'mkdir /mnt/go/var && mkdir /mnt/go/var/lib && mkdir /mnt/go/var/lib/go-server && chown go:go /mnt/go/var/lib/go-server && chmod 0770 /mnt/go/var/lib/go-server'
              test: '[ ! -d /mnt/go/var/lib/go-server ]'
            'g_mount_etc_go':
              command: 'mount --bind /mnt/go/etc/go /etc/go'
              test: 'if mount | grep -q /etc/go; then exit 1; else exit 0; fi'
            'h_mount_var_lib_go_server':
              command: 'mount --bind /mnt/go/var/lib/go-server /var/lib/go-server'
              test: 'if mount | grep -q /var/lib/go-server; then exit 1; else exit 0; fi'
        addrepo:
          commands:
            'a_add':
              command: 'curl https://download.gocd.org/gocd.repo -o /etc/yum.repos.d/gocd.repo'
        install:
          packages:
            yum:
              'java-1.8.0-openjdk': []
              'go-server': []
              'git': []
          commands:
            'a_alternatives':
              command: '/usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
          services:
            sysvinit:
              'go-server':
                enabled: true
                ensureRunning: true
        cfnhup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ServerLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=ServerLaunchConfiguration
                runas=root
          services:
            sysvinit:
              'cfn-hup':
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      IamInstanceProfile: !Ref ServerInstanceProfile
      InstanceType: 't2.small'
      SecurityGroups:
      - !Ref ServerSecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ServerLaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ServerAutoScalingGroup --region ${AWS::Region}
  ServerAutoScalingGroup: # TODO add monitoring
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
    - EFSMountTargetA
    - EFSMountTargetB
    Properties:
      LaunchConfigurationName: !Ref ServerLaunchConfiguration
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 900
      HealthCheckType: ELB
      # TODO NotificationConfigurations
      VPCZoneIdentifier:
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'
      LoadBalancerNames:
      - !Ref LoadBalancer
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT15M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id'
    Value: 'gocd/gocd-server'
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'
  ServerSecurityGroup:
    Description: 'Security group of the GoCD server.'
    Value: !Ref ServerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ServerSecurityGroup'
  DNSName:
    Description: 'The DNS name for the GoCD server load balancer.'
    Value: !GetAtt 'LoadBalancer.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the GoCD server.'
    Value: !Sub 'https://${LoadBalancer.DNSName}/go'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
